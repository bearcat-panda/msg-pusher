// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: meta.proto

package meta

import (
	"fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	_ "github.com/gogo/protobuf/gogoproto"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Type int32

const (
	Sms    Type = 0
	WeChat Type = 1
	Email  Type = 2
)

var Type_name = map[int32]string{
	0: "Sms",
	1: "WeChat",
	2: "Email",
}
var Type_value = map[string]int32{
	"Sms":    0,
	"WeChat": 1,
	"Email":  2,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_meta_a74d6e8920bf74b9, []int{0}
}

type Server int32

const (
	AliYun Server = 0
	ExMail Server = 1
)

var Server_name = map[int32]string{
	0: "AliYun",
	1: "ExMail",
}
var Server_value = map[string]int32{
	"AliYun": 0,
	"ExMail": 1,
}

func (x Server) String() string {
	return proto.EnumName(Server_name, int32(x))
}
func (Server) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_meta_a74d6e8920bf74b9, []int{1}
}

type Status int32

const (
	Wait   Status = 0
	Cancel Status = 1
	Final  Status = 2
)

var Status_name = map[int32]string{
	0: "Wait",
	1: "Cancel",
	2: "Final",
}
var Status_value = map[string]int32{
	"Wait":   0,
	"Cancel": 1,
	"Final":  2,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_meta_a74d6e8920bf74b9, []int{2}
}

type Result int32

const (
	Success Result = 0
	Fail    Result = 1
)

var Result_name = map[int32]string{
	0: "Success",
	1: "Fail",
}
var Result_value = map[string]int32{
	"Success": 0,
	"Fail":    1,
}

func (x Result) String() string {
	return proto.EnumName(Result_name, int32(x))
}
func (Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_meta_a74d6e8920bf74b9, []int{3}
}

type MsgProducer struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"sub_id,omitempty""
	SubId string `protobuf:"bytes,2,opt,name=subId,proto3" json:"sub_id,omitempty"`
	// @inject_tag: json:"send_to,omitempty"
	SendTo    string `protobuf:"bytes,3,opt,name=sendTo,proto3" json:"send_to,omitempty"`
	Template  string `protobuf:"bytes,4,opt,name=template,proto3" json:"template,omitempty"`
	Arguments string `protobuf:"bytes,5,opt,name=arguments,proto3" json:"arguments,omitempty"`
	// @inject_tag: json:"send_time,omitempty"
	SendTime string `protobuf:"bytes,6,opt,name=sendTime,proto3" json:"send_time,omitempty"`
	Server   int32  `protobuf:"varint,7,opt,name=server,proto3" json:"server,omitempty"`
	Type     int32  `protobuf:"varint,8,opt,name=type,proto3" json:"type,omitempty"`
	// 每种消息类型的预留字段
	// sms: signName
	// email: title
	// weChat: url
	Reserved string `protobuf:"bytes,9,opt,name=reserved,proto3" json:"reserved,omitempty"`
	// @inject_tag: json:"-"
	XUtcSendStamp        int64    `protobuf:"varint,10,opt,name=_utcSendStamp,json=UtcSendStamp,proto3" json:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgProducer) Reset()         { *m = MsgProducer{} }
func (m *MsgProducer) String() string { return proto.CompactTextString(m) }
func (*MsgProducer) ProtoMessage()    {}
func (*MsgProducer) Descriptor() ([]byte, []int) {
	return fileDescriptor_meta_a74d6e8920bf74b9, []int{0}
}
func (m *MsgProducer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProducer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProducer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MsgProducer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProducer.Merge(dst, src)
}
func (m *MsgProducer) XXX_Size() int {
	return m.Size()
}
func (m *MsgProducer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProducer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProducer proto.InternalMessageInfo

func (m *MsgProducer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MsgProducer) GetSubId() string {
	if m != nil {
		return m.SubId
	}
	return ""
}

func (m *MsgProducer) GetSendTo() string {
	if m != nil {
		return m.SendTo
	}
	return ""
}

func (m *MsgProducer) GetTemplate() string {
	if m != nil {
		return m.Template
	}
	return ""
}

func (m *MsgProducer) GetArguments() string {
	if m != nil {
		return m.Arguments
	}
	return ""
}

func (m *MsgProducer) GetSendTime() string {
	if m != nil {
		return m.SendTime
	}
	return ""
}

func (m *MsgProducer) GetServer() int32 {
	if m != nil {
		return m.Server
	}
	return 0
}

func (m *MsgProducer) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *MsgProducer) GetReserved() string {
	if m != nil {
		return m.Reserved
	}
	return ""
}

func (m *MsgProducer) GetXUtcSendStamp() int64 {
	if m != nil {
		return m.XUtcSendStamp
	}
	return 0
}

type DbMsg struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"sub_id,omitempty" db:"sub_id"
	SubId string `protobuf:"bytes,2,opt,name=subId,proto3" json:"sub_id,omitempty" db:"sub_id"`
	// @inject_tag: json:"send_to,omitempty" db:"send_to"
	SendTo    string `protobuf:"bytes,3,opt,name=sendTo,proto3" json:"send_to,omitempty" db:"send_to"`
	Type      Type   `protobuf:"varint,4,opt,name=type,proto3,enum=meta.Type" json:"type,omitempty"`
	Server    Server `protobuf:"varint,5,opt,name=server,proto3,enum=meta.Server" json:"server,omitempty"`
	Template  string `protobuf:"bytes,6,opt,name=template,proto3" json:"template,omitempty"`
	Arguments string `protobuf:"bytes,7,opt,name=arguments,proto3" json:"arguments,omitempty"`
	Content   string `protobuf:"bytes,8,opt,name=content,proto3" json:"content,omitempty"`
	Reserved  string `protobuf:"bytes,9,opt,name=reserved,proto3" json:"reserved,omitempty"`
	// @inject_tag: json:"send_time,omitempty" db:"send_time"
	SendTime string `protobuf:"bytes,10,opt,name=sendTime,proto3" json:"send_time,omitempty" db:"send_time"`
	// @inject_tag: json:"try_num,omitempty" db:"try_num"
	TryNum int32  `protobuf:"varint,11,opt,name=tryNum,proto3" json:"try_num,omitempty" db:"try_num"`
	Status Status `protobuf:"varint,12,opt,name=status,proto3,enum=meta.Status" json:"status,omitempty"`
	// @inject_tag: json:"result_status,omitempty" db:"result_status"
	ResultStatus Result `protobuf:"varint,13,opt,name=resultStatus,proto3,enum=meta.Result" json:"result_status,omitempty" db:"result_status"`
	Reason       string `protobuf:"bytes,14,opt,name=reason,proto3" json:"reason,omitempty"`
	// @inject_tag: json:"created_at,omitempty" db:"created_at"
	CreatedAt string `protobuf:"bytes,15,opt,name=createdAt,proto3" json:"created_at,omitempty" db:"created_at"`
	// @inject_tag: json:"updated_at,omitempty" db:"updated_at"
	UpdatedAt string `protobuf:"bytes,16,opt,name=updatedAt,proto3" json:"updated_at,omitempty" db:"updated_at"`
	// @inject_tag: json:"-"
	Version              int32    `protobuf:"varint,17,opt,name=version,proto3" json:"-"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DbMsg) Reset()         { *m = DbMsg{} }
func (m *DbMsg) String() string { return proto.CompactTextString(m) }
func (*DbMsg) ProtoMessage()    {}
func (*DbMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_meta_a74d6e8920bf74b9, []int{1}
}
func (m *DbMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DbMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DbMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DbMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DbMsg.Merge(dst, src)
}
func (m *DbMsg) XXX_Size() int {
	return m.Size()
}
func (m *DbMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_DbMsg.DiscardUnknown(m)
}

var xxx_messageInfo_DbMsg proto.InternalMessageInfo

func (m *DbMsg) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DbMsg) GetSubId() string {
	if m != nil {
		return m.SubId
	}
	return ""
}

func (m *DbMsg) GetSendTo() string {
	if m != nil {
		return m.SendTo
	}
	return ""
}

func (m *DbMsg) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Sms
}

func (m *DbMsg) GetServer() Server {
	if m != nil {
		return m.Server
	}
	return AliYun
}

func (m *DbMsg) GetTemplate() string {
	if m != nil {
		return m.Template
	}
	return ""
}

func (m *DbMsg) GetArguments() string {
	if m != nil {
		return m.Arguments
	}
	return ""
}

func (m *DbMsg) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *DbMsg) GetReserved() string {
	if m != nil {
		return m.Reserved
	}
	return ""
}

func (m *DbMsg) GetSendTime() string {
	if m != nil {
		return m.SendTime
	}
	return ""
}

func (m *DbMsg) GetTryNum() int32 {
	if m != nil {
		return m.TryNum
	}
	return 0
}

func (m *DbMsg) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Wait
}

func (m *DbMsg) GetResultStatus() Result {
	if m != nil {
		return m.ResultStatus
	}
	return Success
}

func (m *DbMsg) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *DbMsg) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *DbMsg) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *DbMsg) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgProducer)(nil), "meta.MsgProducer")
	proto.RegisterType((*DbMsg)(nil), "meta.DbMsg")
	proto.RegisterEnum("meta.Type", Type_name, Type_value)
	proto.RegisterEnum("meta.Server", Server_name, Server_value)
	proto.RegisterEnum("meta.Status", Status_name, Status_value)
	proto.RegisterEnum("meta.Result", Result_name, Result_value)
}
func (m *MsgProducer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProducer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.SubId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.SubId)))
		i += copy(dAtA[i:], m.SubId)
	}
	if len(m.SendTo) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.SendTo)))
		i += copy(dAtA[i:], m.SendTo)
	}
	if len(m.Template) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Template)))
		i += copy(dAtA[i:], m.Template)
	}
	if len(m.Arguments) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Arguments)))
		i += copy(dAtA[i:], m.Arguments)
	}
	if len(m.SendTime) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.SendTime)))
		i += copy(dAtA[i:], m.SendTime)
	}
	if m.Server != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Server))
	}
	if m.Type != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Type))
	}
	if len(m.Reserved) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Reserved)))
		i += copy(dAtA[i:], m.Reserved)
	}
	if m.XUtcSendStamp != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.XUtcSendStamp))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DbMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DbMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.SubId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.SubId)))
		i += copy(dAtA[i:], m.SubId)
	}
	if len(m.SendTo) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.SendTo)))
		i += copy(dAtA[i:], m.SendTo)
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Type))
	}
	if m.Server != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Server))
	}
	if len(m.Template) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Template)))
		i += copy(dAtA[i:], m.Template)
	}
	if len(m.Arguments) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Arguments)))
		i += copy(dAtA[i:], m.Arguments)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.Reserved) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Reserved)))
		i += copy(dAtA[i:], m.Reserved)
	}
	if len(m.SendTime) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.SendTime)))
		i += copy(dAtA[i:], m.SendTime)
	}
	if m.TryNum != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.TryNum))
	}
	if m.Status != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Status))
	}
	if m.ResultStatus != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.ResultStatus))
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	if len(m.CreatedAt) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.CreatedAt)))
		i += copy(dAtA[i:], m.CreatedAt)
	}
	if len(m.UpdatedAt) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.UpdatedAt)))
		i += copy(dAtA[i:], m.UpdatedAt)
	}
	if m.Version != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Version))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintMeta(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MsgProducer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.SubId)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.SendTo)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.Template)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.Arguments)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.SendTime)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	if m.Server != 0 {
		n += 1 + sovMeta(uint64(m.Server))
	}
	if m.Type != 0 {
		n += 1 + sovMeta(uint64(m.Type))
	}
	l = len(m.Reserved)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	if m.XUtcSendStamp != 0 {
		n += 1 + sovMeta(uint64(m.XUtcSendStamp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DbMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.SubId)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.SendTo)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovMeta(uint64(m.Type))
	}
	if m.Server != 0 {
		n += 1 + sovMeta(uint64(m.Server))
	}
	l = len(m.Template)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.Arguments)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.Reserved)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.SendTime)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	if m.TryNum != 0 {
		n += 1 + sovMeta(uint64(m.TryNum))
	}
	if m.Status != 0 {
		n += 1 + sovMeta(uint64(m.Status))
	}
	if m.ResultStatus != 0 {
		n += 1 + sovMeta(uint64(m.ResultStatus))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 2 + l + sovMeta(uint64(l))
	}
	if m.Version != 0 {
		n += 2 + sovMeta(uint64(m.Version))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMeta(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMeta(x uint64) (n int) {
	return sovMeta(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgProducer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProducer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProducer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Template", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Template = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arguments", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arguments = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			m.Server = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Server |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserved", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserved = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XUtcSendStamp", wireType)
			}
			m.XUtcSendStamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XUtcSendStamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DbMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DbMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DbMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			m.Server = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Server |= (Server(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Template", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Template = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arguments", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arguments = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserved", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserved = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TryNum", wireType)
			}
			m.TryNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TryNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultStatus", wireType)
			}
			m.ResultStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultStatus |= (Result(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMeta(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMeta
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMeta
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMeta(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMeta = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMeta   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("meta.proto", fileDescriptor_meta_a74d6e8920bf74b9) }

var fileDescriptor_meta_a74d6e8920bf74b9 = []byte{
	// 515 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0x4d, 0x6e, 0xd3, 0x40,
	0x14, 0x8e, 0x13, 0xdb, 0x49, 0x5e, 0xd2, 0x10, 0x46, 0x11, 0x1a, 0x55, 0xc8, 0x44, 0x05, 0xa1,
	0x90, 0x45, 0x41, 0x70, 0x82, 0x52, 0x5a, 0x89, 0x45, 0x10, 0x72, 0x8a, 0x2a, 0x56, 0x68, 0x62,
	0x3f, 0x05, 0x4b, 0xf6, 0xd8, 0x9a, 0x9f, 0x8a, 0x5c, 0x82, 0x35, 0x47, 0x62, 0xd9, 0x23, 0x40,
	0x38, 0x03, 0x7b, 0x34, 0x33, 0x8e, 0x49, 0x41, 0xea, 0xa6, 0xbb, 0xf9, 0x7e, 0xfc, 0x66, 0xbe,
	0xef, 0xc9, 0x00, 0x05, 0x2a, 0x76, 0x5c, 0x89, 0x52, 0x95, 0xc4, 0x37, 0xe7, 0xc3, 0xc9, 0xba,
	0x5c, 0x97, 0x96, 0x78, 0x6e, 0x4e, 0x4e, 0x3b, 0xfa, 0xda, 0x86, 0xc1, 0x42, 0xae, 0xdf, 0x8b,
	0x32, 0xd5, 0x09, 0x0a, 0x32, 0x82, 0x76, 0x96, 0x52, 0x6f, 0xea, 0xcd, 0xfa, 0x71, 0x3b, 0x4b,
	0xc9, 0x04, 0x02, 0xa9, 0x57, 0x6f, 0x53, 0xda, 0xb6, 0x94, 0x03, 0xe4, 0x01, 0x84, 0x12, 0x79,
	0x7a, 0x51, 0xd2, 0x8e, 0xa5, 0x6b, 0x44, 0x0e, 0xa1, 0xa7, 0xb0, 0xa8, 0x72, 0xa6, 0x90, 0xfa,
	0x56, 0x69, 0x30, 0x79, 0x08, 0x7d, 0x26, 0xd6, 0xba, 0x40, 0xae, 0x24, 0x0d, 0xac, 0xf8, 0x97,
	0x30, 0x5f, 0xda, 0x19, 0x59, 0x81, 0x34, 0x74, 0x5f, 0xee, 0xb0, 0xbb, 0x4d, 0x5c, 0xa1, 0xa0,
	0xdd, 0xa9, 0x37, 0x0b, 0xe2, 0x1a, 0x11, 0x02, 0xbe, 0xda, 0x54, 0x48, 0x7b, 0x96, 0xb5, 0x67,
	0x33, 0x47, 0xa0, 0xd5, 0x53, 0xda, 0x77, 0x73, 0x76, 0x98, 0x3c, 0x86, 0x83, 0x4f, 0x5a, 0x25,
	0x4b, 0xe4, 0xe9, 0x52, 0xb1, 0xa2, 0xa2, 0x30, 0xf5, 0x66, 0x9d, 0x78, 0xf8, 0x61, 0x8f, 0x3b,
	0xfa, 0xdd, 0x81, 0xe0, 0xcd, 0x6a, 0x21, 0xd7, 0x77, 0xac, 0x22, 0xaa, 0x1f, 0x67, 0x6a, 0x18,
	0xbd, 0x84, 0x63, 0xbb, 0x8f, 0x8b, 0x4d, 0x85, 0xf5, 0x43, 0x9f, 0x34, 0xa1, 0x02, 0xeb, 0x18,
	0x3a, 0xc7, 0xd2, 0x72, 0x4d, 0xc4, 0xfd, 0x42, 0xc3, 0xdb, 0x0a, 0xed, 0xfe, 0x5b, 0x28, 0x85,
	0x6e, 0x52, 0x72, 0x85, 0x5c, 0xd9, 0x7e, 0xfa, 0xf1, 0x0e, 0xde, 0x5a, 0xd1, 0xfe, 0x1a, 0xe0,
	0xff, 0x35, 0x28, 0xb1, 0x79, 0xa7, 0x0b, 0x3a, 0x70, 0x6b, 0x70, 0xc8, 0x26, 0x51, 0x4c, 0x69,
	0x49, 0x87, 0x37, 0x92, 0x58, 0x2e, 0xae, 0x35, 0xf2, 0x02, 0x86, 0x02, 0xa5, 0xce, 0x95, 0xe3,
	0xe9, 0xc1, 0xbe, 0x37, 0xb6, 0x4a, 0x7c, 0xc3, 0x61, 0xee, 0x13, 0xc8, 0x64, 0xc9, 0xe9, 0xc8,
	0x35, 0xeb, 0x90, 0xc9, 0x9d, 0x08, 0x64, 0x0a, 0xd3, 0x13, 0x45, 0xef, 0xb9, 0xdc, 0x0d, 0x61,
	0x54, 0x5d, 0xa5, 0xb5, 0x3a, 0x76, 0x6a, 0x43, 0x98, 0x56, 0xae, 0x50, 0xc8, 0xac, 0xe4, 0xf4,
	0xbe, 0x0d, 0xb1, 0x83, 0xf3, 0xa7, 0xe0, 0x9b, 0xed, 0x90, 0x2e, 0x74, 0x96, 0x85, 0x1c, 0xb7,
	0x08, 0x40, 0x78, 0x89, 0xa7, 0x9f, 0x99, 0x1a, 0x7b, 0xa4, 0x0f, 0xc1, 0x59, 0xc1, 0xb2, 0x7c,
	0xdc, 0x9e, 0x4f, 0x21, 0x74, 0x3b, 0x32, 0x86, 0x93, 0x3c, 0xfb, 0xa8, 0xb9, 0x33, 0x9f, 0x7d,
	0x59, 0x18, 0x87, 0x37, 0x7f, 0x06, 0x61, 0x9d, 0xa0, 0x07, 0xfe, 0x25, 0xcb, 0x94, 0xd3, 0x4f,
	0x19, 0x4f, 0x30, 0x77, 0xc3, 0xce, 0x33, 0xce, 0xcc, 0xb0, 0x47, 0x10, 0xba, 0xe8, 0x64, 0x00,
	0xdd, 0xa5, 0x4e, 0x12, 0x94, 0xe6, 0xea, 0x1e, 0xf8, 0xe7, 0x76, 0xd6, 0xeb, 0xc9, 0xf5, 0xcf,
	0xa8, 0xf5, 0x7d, 0x1b, 0x79, 0xd7, 0xdb, 0xc8, 0xfb, 0xb1, 0x8d, 0xbc, 0x6f, 0xbf, 0xa2, 0xd6,
	0x2a, 0xb4, 0xff, 0xee, 0xab, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x01, 0xbf, 0x66, 0xe5,
	0x03, 0x00, 0x00,
}
